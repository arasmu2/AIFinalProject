CS541 - AI Final Project 
Topic - Wordle Search Agent

Group Members:

	Erin Rasmussen
	Tim Hall
	Jeremiah Tilse
	Sharon Oba 

Proposal is to build an AI search algorithm that that can play Wordle.  Since it is difficult to probe a Wordle website thousands of times for the agent's learning mechanism, teammembers will build a python based Wordle game that selects a random 5 letter word.  The word guessing agent will determine the word of the game by sequence of guesses that is based on heuristic search.  We debated on a chess playing AI algorithm for the project but after getting feedback from the professor, 5-letter word searching AI was more reasonable in state space while being able to implement what we learned in class for search algorithms.  

There are a few components that need implementation for the project.  1)Create a data structure for the 5 letter words which would impact the search time and it will likely be a b-tree in alphabetical order or weighted by popularity of letters in the word.  2)Create and explore different heurstic options 3) We will explore similar search algorithms including the pruning method.  4)simple version of the Wordle game was already completed by Erin.   The algorithm performance will be quantified by 1)number of tries it took to find the correct word over average of 30-50 words 2)how long the search took to find the word.

Because wordle and other word games are very popular, a comprehensive list of 5 letter words was found.  Each game will use a copy of the list, and depending on the search pattern will traverse the tree for each attempt.  If a letter is determined to not be part of the solution for that day, it will be pruned from the tree.  If a letter is in the puzzle, but in the wrong location, all nodes with that letter, at that depth will be removed, and depending on the search heuristic, will be given additional weight such that it must be tried in another location.  If a letter is determined to be in the correct position, then all other options at that depth will be removed.  The heruistics will be based on location and if the letter exists in the word.  Minimum heuristics will be zero where all letters are in the correct position.  If the letter is wrong it is assigned more points, compared to if the letter exists but is in wrong place.  

The project plans to use Python, and we may use Spyder, PyCharm for IDE to write python.  We will utilize version control using github.

Search patterns:

One pattern could be a depth first pattern, modified to give letters that are in the solution, but in the wrong position preference.

Another could choose the next letter based on the additional branches from that node, or even all nodes in its subtrees.  The "All Nodes" idea will take more time to process, but may produce better results when guessing.  It is possible that having so many choices could mean a higher failure.  We could weight the guesses with probability of letters appearing in the database.

Also consider giving vowels higher weight, until they pruned from the tree.

Also consider first guess being at random, or giving weight to words that have more diversity in vowels and other popular letters such as 's'.

Refereces:
5 Letter WordLists
https://github.com/tabatkins/wordle-list
https://gist.github.com/dracos/dd0668f281e685bad51479e5acaadb93

Wordle Site
https://www.nytimes.com/games/wordle/index.html


